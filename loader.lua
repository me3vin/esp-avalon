local base64 = game:GetService("HttpService")

local b64data = [[

]]

local function decodeBase64(data)
    return base64:Base64Decode(data)
end

local success, err = pcall(function()
    local decoded = decodeBase64(b64data)
    local func = loadstring(decoded)
    func()
end)

if not success then
    warn("Błąd ładowania odfuskowanego skryptu:", err)
end
