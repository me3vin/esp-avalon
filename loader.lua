local encodedUrl = "-- === ESP + Tracker + Profesjonalne GUI + Chams + ESP Broni + Małe GUI ===

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")

local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera
local PlayerGui = localPlayer:WaitForChild("PlayerGui")

local drawings, names, distances, lines = {}, {}, {}, {}
local chamsEnabled, espEnabled, trackerEnabled = false, false, false
local chamsParts = {}

local weapons = {}
local weaponsESPEnabled = false

-- === GUI ===
local gui = Instance.new("ScreenGui")
gui.Name = "ESPModernGui"
gui.ResetOnSpawn = false
gui.IgnoreGuiInset = true
gui.Parent = PlayerGui

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 220, 0, 210)
frame.Position = UDim2.new(0.5, -110, 0.5, -105)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BackgroundTransparency = 0.1
frame.Visible = false
frame.BorderSizePixel = 0
frame.Parent = gui

Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 12)

local shadow = Instance.new("ImageLabel")
shadow.Name = "Shadow"
shadow.BackgroundTransparency = 1
shadow.Position = UDim2.new(0, -20, 0, -20)
shadow.Size = UDim2.new(1, 40, 1, 40)
shadow.ZIndex = -1
shadow.Image = "rbxassetid://1316045217"
shadow.ImageTransparency = 0.5
shadow.ScaleType = Enum.ScaleType.Slice
shadow.SliceCenter = Rect.new(10, 10, 118, 118)
shadow.Parent = frame

local title = Instance.new("TextLabel")
title.Text = "🎯 Avalon Software"
title.Font = Enum.Font.GothamBold
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.TextSize = 16
title.BackgroundTransparency = 1
title.Position = UDim2.new(0, 0, 0, 6)
title.Size = UDim2.new(1, 0, 0, 20)
title.Parent = frame

local function createToggle(text, posY, toggleVar, onToggle)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, -40, 0, 40)
    button.Position = UDim2.new(0, 20, 0, posY)
    button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    button.TextColor3 = Color3.new(1,1,1)
    button.Text = text .. ": OFF"
    button.Font = Enum.Font.GothamMedium
    button.TextSize = 14
    button.AutoButtonColor = false
    button.Parent = frame

    Instance.new("UICorner", button).CornerRadius = UDim.new(0, 8)

    button.MouseButton1Click:Connect(function()
        _G[toggleVar] = not _G[toggleVar]
        button.Text = text .. ": " .. (_G[toggleVar] and "ON" or "OFF")
        onToggle(_G[toggleVar])
    end)
end

createToggle("ESP 2D", 30, "espEnabled", function(val) espEnabled = val end)
createToggle("Tracker", 75, "trackerEnabled", function(val) trackerEnabled = val end)
createToggle("Chams", 120, "chamsEnabled", function(val)
    chamsEnabled = val
    for player, parts in pairs(chamsParts) do
        for _, adorn in pairs(parts) do
            if adorn:IsA("BoxHandleAdornment") or adorn:IsA("SelectionBox") then
                adorn.Visible = val
            end
        end
    end
end)
createToggle("ESP Broni", 165, "weaponsESPEnabled", function(val)
    weaponsESPEnabled = val
    for _, data in pairs(weapons) do
        data.box.Visible = val
        data.name.Visible = val
    end
end)

UserInputService.InputBegan:Connect(function(input, gp)
    if not gp and input.KeyCode == Enum.KeyCode.K then
        frame.Visible = not frame.Visible
    end
end)

-- === ESP Functions ===
local function createChams(player)
    if chamsParts[player] then return end
    chamsParts[player] = {}
    local function applyChams(char)
        task.wait(1)
        for _, part in ipairs(char:GetDescendants()) do
            if part:IsA("BasePart") and part.Transparency < 1 then
                local adorn = Instance.new("BoxHandleAdornment")
                adorn.Adornee = part
                adorn.AlwaysOnTop = true
                adorn.ZIndex = 0
                adorn.Size = part.Size
                adorn.Transparency = 0.5
                adorn.Color3 = Color3.new(1, 1, 1)
                adorn.Name = "Cham"
                adorn.Visible = chamsEnabled
                adorn.Parent = part
                table.insert(chamsParts[player], adorn)

                local outline = Instance.new("SelectionBox")
                outline.Adornee = part
                outline.LineThickness = 0.03
                outline.Color3 = Color3.new(1, 0, 0)
                outline.SurfaceTransparency = 0.7
                outline.Transparency = 0.5
                outline.Visible = chamsEnabled
                outline.Parent = part
                table.insert(chamsParts[player], outline)
            end
        end
    end
    if player.Character then applyChams(player.Character) end
    player.CharacterAdded:Connect(applyChams)
end

local function createESP(player)
    if drawings[player] then return end
    local box = Drawing.new("Square")
    box.Thickness = 1
    box.Filled = false
    box.Transparency = 1
    box.Visible = false

    local name = Drawing.new("Text")
    name.Size = 13
    name.Center = true
    name.Outline = true
    name.Transparency = 1
    name.Visible = false

    local dist = Drawing.new("Text")
    dist.Size = 13
    dist.Center = true
    dist.Outline = true
    dist.Transparency = 1
    dist.Visible = false

    local line = Drawing.new("Line")
    line.Thickness = 1
    line.Transparency = 1
    line.Visible = false

    drawings[player], names[player], distances[player], lines[player] = box, name, dist, line
end

local function removeESP(player)
    for _, t in pairs({drawings, names, distances, lines}) do
        if t[player] then t[player]:Remove() t[player] = nil end
    end
    if chamsParts[player] then
        for _, a in pairs(chamsParts[player]) do
            if a and a.Parent then a:Destroy() end
        end
        chamsParts[player] = nil
    end
end

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= localPlayer then
        createESP(player)
        createChams(player)
        player.CharacterAdded:Connect(function()
            createESP(player)
            createChams(player)
        end)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= localPlayer then
        createESP(player)
        createChams(player)
        player.CharacterAdded:Connect(function()
            createESP(player)
            createChams(player)
        end)
    end
end)

Players.PlayerRemoving:Connect(removeESP)

-- === ESP Broni ===
local function createWeaponESP(weapon)
    if weapons[weapon] then return end

    local box = Drawing.new("Square")
    box.Thickness = 1
    box.Filled = false
    box.Color = Color3.fromRGB(255, 255, 0)
    box.Transparency = 1
    box.Visible = weaponsESPEnabled

    local name = Drawing.new("Text")
    name.Text = weapon.Name
    name.Size = 14
    name.Center = true
    name.Outline = true
    name.Color = Color3.fromRGB(255, 255, 0)
    name.Visible = weaponsESPEnabled

    weapons[weapon] = {
        box = box,
        name = name
    }
end

local function removeWeaponESP(weapon)
    if weapons[weapon] then
        weapons[weapon].box:Remove()
        weapons[weapon].name:Remove()
        weapons[weapon] = nil
    end
end

local function updateWeapons()
    local weaponFolder = workspace:FindFirstChild("Weapons")
    if not weaponFolder then return end

    for weapon, _ in pairs(weapons) do
        if not weapon or not weapon.Parent or weapon.Parent ~= weaponFolder then
            removeWeaponESP(weapon)
        end
    end

    for _, weapon in pairs(weaponFolder:GetChildren()) do
        if weapon:IsA("Model") then
            createWeaponESP(weapon)
        end
    end
end

-- === RenderStep Loop ===
RunService.RenderStepped:Connect(function()
    local bottomCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
    local viewportSize = camera.ViewportSize

    for player, box in pairs(drawings) do
        local char = player.Character
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        local head = char and char:FindFirstChild("Head")

        if hrp and head then
            local topPos, topVisible = camera:WorldToViewportPoint(head.Position + Vector3.new(0, 0.5, 0))
            local bottomPos, bottomVisible = camera:WorldToViewportPoint(hrp.Position - Vector3.new(0, 3, 0))

            if topVisible and bottomVisible then
                local height = math.abs(topPos.Y - bottomPos.Y)
                local width = height / 2
                local boxX, boxY = topPos.X - width / 2, topPos.Y
                local boxBottom = Vector2.new(boxX + width / 2, boxY + height)

                if espEnabled then
                    box.Size = Vector2.new(width, height)
                    box.Position = Vector2.new(boxX, boxY)
                    box.Visible = true

                    names[player].Text = player.Name
                    names[player].Position = Vector2.new(topPos.X, boxY - 15)
                    names[player].Visible = true

                    local dist = (localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")) and (localPlayer.Character.HumanoidRootPart.Position - hrp.Position).Magnitude or 0
                    distances[player].Text = string.format("%.0f m", dist)
                    distances[player].Position = Vector2.new(topPos.X, boxY + height + 2)
                    distances[player].Visible = true
                else
                    box.Visible = false
                    names[player].Visible = false
                    distances[player].Visible = false
                end

                if trackerEnabled then
                    lines[player].From = boxBottom
                    lines[player].To = bottomCenter
                    lines[player].Color = Color3.fromRGB(255, 50, 50)
                    lines[player].Visible = true
                else
                    lines[player].Visible = false
                end
            else
                box.Visible = false
                names[player].Visible = false
                distances[player].Visible = false
                lines[player].Visible = false
            end
        else
            box.Visible = false
            names[player].Visible = false
            distances[player].Visible = false
            lines[player].Visible = false
        end
    end

    updateWeapons()

    for weapon, data in pairs(weapons) do
        if weapon.PrimaryPart then
            local screenPos, onScreen = camera:WorldToViewportPoint(weapon.PrimaryPart.Position)
            if onScreen and weaponsESPEnabled then
                local size = 50
                data.box.Size = Vector2.new(size, size)
                data.box.Position = Vector2.new(screenPos.X - size / 2, screenPos.Y - size / 2)
                data.box.Visible = true
                data.name.Position = Vector2.new(screenPos.X, screenPos.Y - size / 2 - 15)
                data.name.Visible = true
            else
                data.box.Visible = false
                data.name.Visible = false
            end
        else
            data.box.Visible = false
            data.name.Visible = false
        end
    end
end)

-- === Mini GUI z datą i godziną (GÓRA PRAWA STRONA) ===
local infoGui = Instance.new("ScreenGui")
infoGui.Name = "InfoOverlay"
infoGui.IgnoreGuiInset = true
infoGui.ResetOnSpawn = false
infoGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
infoGui.Parent = PlayerGui

local infoFrame = Instance.new("Frame")
infoFrame.Size = UDim2.new(0, 300, 0, 30)
infoFrame.Position = UDim2.new(1, -310, 0, 10)
infoFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
infoFrame.BackgroundTransparency = 0.2
infoFrame.BorderSizePixel = 0
infoFrame.Parent = infoGui

Instance.new("UICorner", infoFrame).CornerRadius = UDim.new(0, 8)

local infoLabel = Instance.new("TextLabel")
infoLabel.Size = UDim2.new(1, 0, 1, 0)
infoLabel.BackgroundTransparency = 1
infoLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
infoLabel.TextSize = 14
infoLabel.Font = Enum.Font.GothamMedium
infoLabel.TextXAlignment = Enum.TextXAlignment.Center
infoLabel.Text = "Ft. AvalonSoft | Data: ładowanie... | Godzina: ładowanie..."
infoLabel.Parent = infoFrame

task.spawn(function()
    while true do
        local czas = os.date("*t")
        local dataStr = string.format("%02d.%02d.%04d", czas.day, czas.month, czas.year)
        local godzinaStr = string.format("%02d:%02d:%02d", czas.hour, czas.min, czas.sec)
        infoLabel.Text = "Ft. AvalonSoft | Data: " .. dataStr .. " | Godzina: " .. godzinaStr
        task.wait(1)
    end
end)

-- === Powiadomienie ===
StarterGui:SetCore("SendNotification", {
    Title = "✅ AvalonSoftware",
    Text = "Skrypt został załadowany i jest gotowy!",
    Duration = 5
})"

local url = base64Decode(encodedUrl)

local code = game:HttpGet(url)
local func = loadstring(code)
func()
